using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FromPage_7
{
    internal class Program
    {
        #region Что нужно сделать
        //Улучшите программу, которую разработали в модуле 6. Создайте структуру Worker со следующими свойствами:

        //  ID
        //  Дата и время добавления записи
        //  Ф.И.О.
        //  Возраст
        //  Рост
        //  Дата рождения
        //  Место рождения

        //  Структура будет выглядеть примерно так:
        //    struct Worker
        //    {
        //            public int Id { get; set; }
        //            public string FIO { get; set; }
        //    … другие свойства
        //    }

        //        Создайте класс Repository, который будет отвечать за работу с экземплярами Worker.
        //        В репозитории должны быть реализованы следующие функции:

        //        Просмотр всех записей.
        //        Просмотр одной записи.Функция должна на вход принимать параметр ID записи, которую необходимо вывести на экран.

        //        Создание записи.
        //        Удаление записи.
        //        Загрузка записей в выбранном диапазоне дат.
        //        Структура класса Repository примерно такая:

        //      class Repository
        //      {
        //            public Worker[] GetAllWorkers()
        //         {
        //                // здесь происходит чтение из файла
        //                // и возврат массива считанных экземпляров
        //         }

        //            public Worker GetWorkerById(int id)
        //         {
        //                // происходит чтение из файла, возвращается Worker
        //                // с запрашиваемым ID
        //         }

        //            public void DeleteWorker(int id)
        //         {
        //                // считывается файл, находится нужный Worker
        //                // происходит запись в файл всех Worker,
        //                // кроме удаляемого
        //         }

        //            public void AddWorker(Worker worker)
        //         {
        //                // присваиваем worker уникальный ID,
        //                // дописываем нового worker в файл
        //         }

        //            public Worker[] GetWorkersBetweenTwoDates(DateTime dateFrom, DateTime dateTo)
        //         {
        //                // здесь происходит чтение из файла
        //                // фильтрация нужных записей
        //                // и возврат массива считанных экземпляров
        //         }
        //      }

        //        Имя файла должно храниться в приватном поле Repository.Файл, который использует репозиторий, должен выглядеть примерно так:
        //          1#20.12.2021 00:12#Иванов Иван Иванович#25#176#05.05.1992#город Москва
        //          2#15.12.2021 03:12#Алексеев Алексей Иванович#24#176#05.11.1980#город Томск
        //…

        //        Используя структуру Worker и класс Repository, в основном методе Main реализуйте программу для работы с записями.
        //        Также предоставьте пользователю возможность сортировать данные по разным полям.

        //        При желании можете дополнить программу следующим функционалом:
        //        Редактирование записей.
        //        Генерация запрашиваемого количества записей из кода (в качестве имени можно использовать строки типа «Имя1», «Имя2», …).
        //        Свой функционал.

        //          Советы и рекомендации
        //          Обратите внимание, что в строке есть символ # — разделитель. 
        //          Символа # не должно быть при чтении (разбить строку на массив поможет разделение строк с помощью метода String.Split).
        //          Создайте методы для работы с записями.
        //          Файла изначально нет, поэтому программа при первом запуске должна его создать, чтобы не было ошибки.
        //          Сортировку по полям удобнее всего выполнять с помощью метода OrderBy. Пример сортировки по FIO и по ID:
        //          workers.OrderBy(w=>w.FIO);
        //          workers.OrderBy(w => w.Id);

        #endregion

        #region  Что нужно сделать 6

        //Создайте справочник «Сотрудники».

        //Разработайте для предполагаемой компании программу, которая будет добавлять записи новых сотрудников в файл.
        //Файл должен содержать следующие данные:

        //ID
        //Дату и время добавления записи
        //Ф.И.О.
        //Возраст
        //Рост
        //Дату рождения
        //Место рождения

        //Для этого необходим ввод данных с клавиатуры.После ввода данных:

        //если файла не существует, его необходимо создать;
        //    если файл существует, то необходимо записать данные сотрудника в конец файла.
        //    При запуске программы должен быть выбор:


        //    введём 1 — вывести данные на экран;
        //    введём 2 — заполнить данные и добавить новую запись в конец файла.


        //    Файл должен иметь следующую структуру:

        //1#20.12.2021 00:12#Иванов Иван Иванович#25#176#05.05.1992#город Москва
        //2#15.12.2021 03:12#Алексеев Алексей Иванович#24#176#05.11.1980#город Томск
        //…


        //Советы и рекомендации
        //Обратите внимание, что в строке есть символ # — разделитель в строке. При чтении файла необходимо убрать символ #.
        //Разбить строку на массив элементов поможет разделение строк с помощью метода String.Split.
        //Разбейте программу на методы(чтение, запись).
        //Новую запись внесите в конец файла.
        //Проверьте, создан файл или нет.


        //Что оценивается
        //Структура файла после добавления сотрудника идентична.
        //Каждый метод выполняет одну задачу.
        //Запись корректно выводится в консоль.
        //Файл корректно закрывается после записи и чтения.

        #endregion

        #region методы для работы с данными

        /// <summary>
        /// метод для чтения файла
        /// </summary>
        /// <param name="fileName"></param>
        static void ReadF(string fileName)
        {
            Console.Clear();
            string list;
            if (File.Exists(fileName))
            {
                using (StreamReader sr = new StreamReader(fileName))
                {
                    list = sr.ReadToEnd();
                }
                list = list.Replace("#", " ");
                Console.WriteLine(list);
            }
            else
            {
                Console.WriteLine("Файл еще не существует, выберите создать первую запись ");
            }
            Console.WriteLine();
            Console.WriteLine("Для продожения нажмите любую кнопку...");
            Console.ReadKey();
        }
        /// <summary>
        /// метод для записи файла
        /// </summary>
        /// <param name="fileName"></param>
        static void WriteF(string fileName)
        {
            // часть первая считать файл для получения значения очередного номера записи
            string[] list;
            int count;
            if (File.Exists(fileName))
            {
                using (StreamReader sr = new StreamReader(fileName))
                {
                    list = sr.ReadToEnd().Split('#');
                }
                count = ((list.Length + 1) / 7);
            }
            else
            {
                count = 0;
            }

            // часть вторая метода опрос пользователя и запись данных в файл
            string line = $"{count + 1}#{DateTime.Now}#{ask("Фаимилия Имя Отчество")}" +
                $"#{ask("Возрост")}#{ask("Рост")}#{ask("Дата рождения")}#{ask("Место рождения")}";

            string ask(string text)
            {
                Console.WriteLine(text);
                return Console.ReadLine();
            } // внутрений метод для считывания данных пользователя

            Console.WriteLine(line);
            using (StreamWriter sw = new StreamWriter(fileName, true))
            {
                sw.WriteLine(line);
            }

        }
        #endregion

        static void Main(string[] args)
        {
            string fileName = "list.csv"; // расположение файла
            while (true)
            {
                Console.WriteLine("Справочник «Сотрудники» \n" +
                    " Нажмите 1 - для просмотра сотрудников\n" +
                    " Нажмите 2 - для добавления нового сотрудника\n" +
                    " Нажмите 3 - для выхода из программы");
                string chose = Console.ReadLine();
                if (chose == "1")
                {
                    ReadF(fileName);
                    Console.Clear();
                }
                else if (chose == "2")
                {
                    WriteF(fileName);
                    Console.Clear();
                }
                else if (chose == "3")
                {
                    break;
                }
                else
                {
                    Console.WriteLine("Не верный выбор попробуйте еще раз:");
                    Console.Clear();
                }
            }
        }
    }
}

